import type { Text } from '../types';
import EnhancedElement from '../elements/helpers/EnhancedElement';
import { Align, Format } from '../enums';
import switchButton from '../templates/switchButton';
export default class AMCookies extends EnhancedElement {
    static get observedProperties(): string[];
    static get styles(): () => Promise<CSSStyleSheet>;
    allowRetargeting: boolean | null;
    allowStatistical: boolean | null;
    hasRetargeting: boolean;
    isCustomize: boolean | null;
    isSaving: boolean;
    isVisible: boolean;
    shadow: undefined | ShadowRoot;
    switchButton: typeof switchButton;
    template: HTMLTemplateElement;
    set accentColor(value: string);
    get accentColor(): string;
    set alignMiniPrompt(value: Align);
    get alignMiniPrompt(): Align;
    set alignPrompt(value: Align);
    get alignPrompt(): Align;
    set backgroundColor(value: string);
    get backgroundColor(): string;
    set borderWidth(value: number);
    get borderWidth(): number;
    set color(value: string);
    get color(): string;
    set fontFamily(value: string);
    get fontFamily(): string;
    set format(value: Format);
    get format(): Format;
    set googleID(value: string | null);
    get googleID(): string | null;
    set metaPixelID(value: string | null);
    get metaPixelID(): string | null;
    set privacyPolicyURL(value: string | null);
    get privacyPolicyURL(): string | null;
    set snapChatPixelID(value: string | null);
    get snapChatPixelID(): string | null;
    set tiktokPixelID(value: string | null);
    get tiktokPixelID(): string | null;
    protected gdprContainer: null | HTMLSlotElement;
    private _consentListeners;
    private _cookieWarning;
    private _gTag?;
    private _gtm?;
    private _meta?;
    private _miniGDPR;
    private _popUp;
    private _scrollPos;
    private _snapChat?;
    private _text?;
    private _tikTok?;
    constructor();
    acceptAll(): void;
    connectedCallback(): Promise<void>;
    declineAll(): void;
    disconnectedCallback(): void;
    esc({ key }: KeyboardEvent): void;
    getText(): {
        settings: string;
        customize: {
            header: string;
            label: string;
            text: string;
            retargeting: string;
            link: string;
        };
        header: string;
        miniGDPR: string;
        accept: string;
        acceptAll: string;
        decline: string;
        close: string;
        save: string;
        functional: {
            label: string;
        };
        statistical: {
            label: string;
        };
        marketing: {
            label: string;
        };
        policyUrl: string;
    };
    handleChange({ target }: Event, component: AMCookies): void;
    hideOnScroll(): void;
    propertyChangedCallback(name: string, _oldValue: unknown, value: unknown): void;
    save(): void;
    setCustomize(value: boolean): void;
    setText(text: Text): void;
    setVisible(): void;
    protected render(): Promise<void>;
    private _addEventListeners;
    private _debug;
    private _removeEventListeners;
}
